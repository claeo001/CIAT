# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-gradle

name: Test

on:
  pull_request:
    branches: 
      - "master"

jobs:
  build:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./backend      
    steps:
    - uses: actions/checkout@v2
    - name: Set up JDK 11
      uses: actions/setup-java@v2
      with:
        java-version: '11'
        distribution: 'adopt'
        server-id: github # Value of the distributionManagement/repository/id field of the pom.xml
        settings-path: ${{ github.workspace }} # location for the settings.xml file
       
    - name: test
      run: gradle test -Djasypt.encryptor.password=${{ secrets.KEY }}
        
    - name: Discord Alert Success
      uses: sarisia/actions-status-discord@v1
      if: success()
      with:
          webhook: ${{ secrets.DISCORD_WEBHOOK }}
          description: "🎉 테스트 되었습니다!"

    - name: Discord Alert Failure
      uses: sarisia/actions-status-discord@v1
      if: failure()
      with:
          webhook: ${{ secrets.DISCORD_WEBHOOK }}
          description: "🔥 테스트를 실패하였습니다."     
          
    - name: Publish Unit Test Results
      uses: EnricoMi/publish-unit-test-result-action@v1
      if: ${{ always() }}
      with:
          files: build/test-results/**/*.xml
  
    - name: Test Report
      uses: dorny/test-reporter@v1
      if: success() || failure()    # run this step even if previous step failed
      with: 
          name: test-results
          path: junit.xml
          fail-on-error: 'false'
          reporter: jest-junit        # Format of test results
          token: ${{ secrets.GITHUB_TOKEN }}
  

